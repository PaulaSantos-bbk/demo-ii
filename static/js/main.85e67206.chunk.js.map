{"version":3,"sources":["constants/index.js","components/Contact/index.jsx","components/ContactList/index.jsx","components/ContactManager/index.jsx","components/Form/index.jsx","components/Input/index.jsx","components/Modal/index.jsx","App.js","serviceWorker.js","index.js"],"names":["INITIAL_VALUE","name","phone","email","Contact","aria-label","role","ContactList","className","listOfContacts","length","map","contact","ContactManager","onSubmit","useState","isExpanded","setIsExpanded","onClick","isActive","requiredFields","Object","keys","Form","data","formData","setFormData","onChange","event","target","id","value","stopPropagation","preventDefault","field","key","defaultValue","type","Input","props","htmlFor","Modal","children","App","contacts","setContacts","filter","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0UAAaA,G,MAAgB,CAAEC,KAAM,GAAIC,MAAO,GAAIC,MAAO,KCyB5CC,EAtBC,SAAC,GAAD,QACdD,aADc,MDDa,MCCb,MAEdF,YAFc,MDDa,MCCb,MAGdC,aAHc,MDDa,MCCb,SAKd,4BACE,4BAAKD,GACL,4BAAKC,GACL,4BAAKC,GACL,4BACE,0BAAME,aAAW,OAAOC,KAAK,OAA7B,uBAIF,4BACE,0BAAMD,aAAW,SAASC,KAAK,OAA/B,aCWSC,G,MAzBK,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,IAAcC,sBAAd,MAA+B,GAA/B,SAClB,2BACED,UAAS,iCAA4BA,EAAS,WAAOA,GAAc,KAEnE,+BACE,4BACE,oCACA,qCACA,qCACA,oCACA,wCAGHC,EAAeC,OACd,+BACGD,EAAeE,KAAI,SAACC,GAAD,OAClB,kBAAC,EAAYA,OAIjB,gECJSC,G,MAhBQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACHC,oBAAS,GADN,mBAChCC,EADgC,KACpBC,EADoB,KAEjCC,EAAU,kBAAMD,GAAeD,IAErC,OACE,oCACE,yBAAKR,UAAU,4BAA4BU,QAASA,GAApD,KAGA,kBAAC,EAAD,CAAOA,QAASA,EAASC,SAAUH,GACjC,kBAAC,EAAD,CAAMF,SAAUA,Q,cCTlBM,G,MAAiBC,OAAOC,KAAKtB,IA2BpBuB,EAzBF,SAAC,GAAwC,IAAD,IAArCC,YAAqC,MAA9BxB,EAA8B,EAAfc,EAAe,EAAfA,SAAe,EACnBC,mBAASS,GADU,mBAC5CC,EAD4C,KAClCC,EADkC,KAE7CC,EAAW,SAACC,GAAD,OACfF,EAAY,2BAAKD,GAAN,kBAAiBG,EAAMC,OAAOC,GAAKF,EAAMC,OAAOE,UAO7D,OACE,0BAAMb,QAPQ,SAACU,GAAD,OAAWA,EAAMI,mBAOPxB,UAAU,aAAaM,SANzB,SAACc,GACvBA,EAAMK,iBACNnB,EAASW,KAKNL,EAAeT,KAAI,SAACuB,GAAD,OAClB,kBAAC,EAAD,CACEC,IAAKD,EACLJ,GAAII,EACJP,SAAUA,EACVS,aAAcX,EAASS,QAG3B,kBAAC,EAAD,CAAOG,KAAK,SAASN,MAAM,a,OCblBO,G,MAXD,SAAC,GAAD,IAAGR,EAAH,EAAGA,GAAOS,EAAV,6BACZ,oCACGT,GACC,2BAAOtB,UAAU,cAAcgC,QAASV,GAAxC,UACMA,EADN,OAIF,yCAAOA,GAAIA,EAAItB,UAAU,eAAkB+B,OCDhCE,G,MAND,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUvB,EAAb,EAAaA,SAAUD,EAAvB,EAAuBA,QAAvB,OACZ,yBAAKV,UAAS,eAAUW,EAAW,UAAY,IAAMD,QAASA,GAC3DwB,KCeUC,EAhBH,WAAO,IAAD,EACgB5B,mBAAS,IADzB,mBACT6B,EADS,KACCC,EADD,KAQhB,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,CAAgBM,SARA,SAACU,GACnBqB,EACED,EAASE,QAAO,SAAClC,GAAD,OAAaA,EAAQX,OAASuB,EAAKvB,QAAM8C,OAAOvB,OAOhE,kBAAC,EAAD,CAAaf,eAAgBmC,MCHfI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.85e67206.chunk.js","sourcesContent":["export const INITIAL_VALUE = { name: '', phone: '', email: '' }\r\n\r\nexport const DEFAULT_VALUE = 'N/A'\r\n","import React from 'react'\r\nimport { DEFAULT_VALUE } from '../../constants'\r\n\r\nconst Contact = ({\r\n  email = DEFAULT_VALUE,\r\n  name = DEFAULT_VALUE,\r\n  phone = DEFAULT_VALUE,\r\n}) => (\r\n  <tr>\r\n    <td>{name}</td>\r\n    <td>{phone}</td>\r\n    <td>{email}</td>\r\n    <td>\r\n      <span aria-label='edit' role='img'>\r\n        🖋️\r\n      </span>\r\n    </td>\r\n    <td>\r\n      <span aria-label='delete' role='img'>\r\n        ❌\r\n      </span>\r\n    </td>\r\n  </tr>\r\n)\r\n\r\nexport default Contact\r\n","import React from 'react'\r\nimport './ContactList.css'\r\nimport { Contact } from '..'\r\n\r\nconst ContactList = ({ className, listOfContacts = [] }) => (\r\n  <table\r\n    className={`contact-list-base green${className ? ` ${className}` : ''}`}\r\n  >\r\n    <thead>\r\n      <tr>\r\n        <th>Name</th>\r\n        <th>Phone</th>\r\n        <th>Email</th>\r\n        <th>Edit</th>\r\n        <th>Delete</th>\r\n      </tr>\r\n    </thead>\r\n    {listOfContacts.length ? (\r\n      <tbody>\r\n        {listOfContacts.map((contact) => (\r\n          <Contact {...contact} />\r\n        ))}\r\n      </tbody>\r\n    ) : (\r\n      <div>No contacts present here yet</div>\r\n    )}\r\n  </table>\r\n)\r\n\r\nexport default ContactList\r\n","import React, { useState } from 'react'\r\nimport './ContactManager.css'\r\nimport { Form, Modal } from '..'\r\n\r\nconst ContactManager = ({ onSubmit }) => {\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n  const onClick = () => setIsExpanded(!isExpanded)\r\n\r\n  return (\r\n    <>\r\n      <div className='contact-manager-add green' onClick={onClick}>\r\n        +\r\n      </div>\r\n      <Modal onClick={onClick} isActive={isExpanded}>\r\n        <Form onSubmit={onSubmit} />\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ContactManager\r\n","import React, { useState } from 'react'\r\nimport './Form.css'\r\nimport { INITIAL_VALUE } from '../../constants'\r\nimport { Input } from '..'\r\n\r\nconst requiredFields = Object.keys(INITIAL_VALUE)\r\n\r\nconst Form = ({ data = INITIAL_VALUE, onSubmit }) => {\r\n  const [formData, setFormData] = useState(data)\r\n  const onChange = (event) =>\r\n    setFormData({ ...formData, [event.target.id]: event.target.value })\r\n  const onClick = (event) => event.stopPropagation()\r\n  const onSubmitWrapper = (event) => {\r\n    event.preventDefault()\r\n    onSubmit(formData)\r\n  }\r\n\r\n  return (\r\n    <form onClick={onClick} className='form green' onSubmit={onSubmitWrapper}>\r\n      {requiredFields.map((field) => (\r\n        <Input\r\n          key={field}\r\n          id={field}\r\n          onChange={onChange}\r\n          defaultValue={formData[field]}\r\n        />\r\n      ))}\r\n      <Input type='submit' value='Submit' />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\nimport './Input.css'\r\n\r\nconst Input = ({ id, ...props }) => (\r\n  <>\r\n    {id && (\r\n      <label className='input-label' htmlFor={id}>\r\n        {`${id}: `}\r\n      </label>\r\n    )}\r\n    <input id={id} className='input-input' {...props} />\r\n  </>\r\n)\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport './Modal.css'\r\n\r\nconst Modal = ({ children, isActive, onClick }) => (\r\n  <div className={`modal${isActive ? ' active' : ''}`} onClick={onClick}>\r\n    {children}\r\n  </div>\r\n)\r\n\r\nexport default Modal\r\n","import React, { useState } from 'react'\r\nimport './App.css'\r\nimport { ContactList, ContactManager } from './components'\r\n\r\nconst App = () => {\r\n  const [contacts, setContacts] = useState([])\r\n  const addContacts = (data) => {\r\n    setContacts(\r\n      contacts.filter((contact) => contact.name !== data.name).concat(data),\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className='app'>\r\n      <ContactManager onSubmit={addContacts} />\r\n      <ContactList listOfContacts={contacts} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}